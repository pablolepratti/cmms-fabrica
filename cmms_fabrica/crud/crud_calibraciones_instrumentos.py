"""
üìÑ CRUD de Calibraciones de Instrumentos ‚Äì CMMS F√°brica

Normas aplicables: ISO/IEC 17025 | ISO 9001:2015 | ISO 55001

Descripci√≥n: Permite registrar, visualizar, editar y eliminar eventos de calibraci√≥n con trazabilidad completa y alertas por vencimiento.
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from modulos.conexion_mongo import db
from crud.generador_historial import registrar_evento_historial
from modulos.utilidades_formularios import (
    select_activo_tecnico,
    select_proveedores_externos,
)


def crear_calibracion(data: dict, database=db):
    """Inserta un registro de calibraci√≥n y registra el evento."""
    if database is None:
        return None
    coleccion = database["calibraciones"]
    coleccion.insert_one(data)
    registrar_evento_historial(
        "Alta de calibraci√≥n",
        data["id_activo_tecnico"],
        data["id_calibracion"],
        f"Calibraci√≥n registrada para {data['id_activo_tecnico']}",
        data["usuario_registro"],
    )
    return data["id_calibracion"]



def generar_id_calibracion():
    return f"CAL-{int(datetime.now().timestamp())}"

def form_calibracion(defaults=None):
    ids_activos = select_activo_tecnico(db)
    nombres_proveedores = select_proveedores_externos(db)

    if not ids_activos:
        st.warning("‚ö†Ô∏è No hay activos t√©cnicos registrados.")
        return None

    with st.form("form_calibracion"):
        id_default = defaults.get("id_activo_tecnico") if defaults else ""
        index_default = ids_activos.index(id_default) if id_default in ids_activos else 0
        id_activo = st.selectbox("ID del Instrumento", ids_activos, index=index_default)

        id_calibracion = defaults.get("id_calibracion") if defaults else generar_id_calibracion()
        fecha_val = defaults.get("fecha_calibracion") if defaults else None
        fecha_cal = st.date_input("Fecha de Calibraci√≥n", value=datetime.strptime(fecha_val, "%Y-%m-%d") if fecha_val else datetime.today())

        responsable = st.text_input("Responsable de Calibraci√≥n", value=defaults.get("responsable") if defaults else "")

        proveedor_default = defaults.get("proveedor_externo") if defaults else ""
        usa_proveedor = st.checkbox("¬øParticipa un proveedor externo?", value=bool(proveedor_default))
        proveedor_externo = ""
        if usa_proveedor and nombres_proveedores:
            index_prov = nombres_proveedores.index(proveedor_default) if proveedor_default in nombres_proveedores else 0
            proveedor_externo = st.selectbox("Proveedor Externo", nombres_proveedores, index=index_prov)

        resultado_opciones = ["Correcta", "Desviaci√≥n leve", "Desviaci√≥n cr√≠tica"]
        resultado = st.selectbox("Resultado", resultado_opciones,
                                 index=resultado_opciones.index(defaults.get("resultado")) if defaults and defaults.get("resultado") in resultado_opciones else 0)

        acciones = st.text_area("Acciones Derivadas", value=defaults.get("acciones") if defaults else "")
        observaciones = st.text_area("Observaciones", value=defaults.get("observaciones") if defaults else "")

        prox_fecha = defaults.get("fecha_proxima") if defaults else None
        prox_valor = datetime.strptime(prox_fecha, "%Y-%m-%d") if prox_fecha else datetime.today() + timedelta(days=180)
        prox = st.date_input("Fecha Pr√≥xima Calibraci√≥n", value=prox_valor)

        usuario = st.text_input("Usuario que registra", value=defaults.get("usuario_registro") if defaults else "")

        submit = st.form_submit_button("Guardar Calibraci√≥n")

    if submit:
        if not responsable or not usuario:
            st.error("Debe completar los campos obligatorios: Responsable y Usuario.")
            return None
        if usa_proveedor and not proveedor_externo:
            st.error("Debe seleccionar un proveedor si se indica que es externo.")
            return None

        return {
            "id_calibracion": id_calibracion,
            "id_activo_tecnico": id_activo,
            "fecha_calibracion": str(fecha_cal),
            "fecha_proxima": str(prox),
            "responsable": responsable,
            "proveedor_externo": proveedor_externo if usa_proveedor else "",
            "resultado": resultado,
            "acciones": acciones,
            "observaciones": observaciones,
            "usuario_registro": usuario,
            "fecha_registro": datetime.now()
        }
    return None

def app():
    if db is None:
        st.error("MongoDB no disponible")
        return
    coleccion = db["calibraciones"]
    activos = db["activos_tecnicos"]
    proveedores = db["servicios_externos"]

    st.title("üß™ Gesti√≥n de Calibraciones de Instrumentos")
    menu = ["Registrar Calibraci√≥n", "Ver Calibraciones", "Editar Calibraci√≥n", "Eliminar Calibraci√≥n"]
    choice = st.sidebar.radio("Acci√≥n", menu)

    if choice == "Registrar Calibraci√≥n":
        st.subheader("‚ûï Nueva Calibraci√≥n")
        data = form_calibracion()
        if data:
            crear_calibracion(data, db)
            st.success("‚úÖ Calibraci√≥n registrada correctamente.")

    elif choice == "Ver Calibraciones":
        st.subheader("üìã Calibraciones por Instrumento")
        registros = list(coleccion.find().sort("fecha_calibracion", -1))

        if not registros:
            st.info("No hay calibraciones registradas.")
            return

        df = pd.DataFrame(registros)
        df["fecha_proxima"] = pd.to_datetime(df["fecha_proxima"], errors="coerce")
        hoy = datetime.today()
        df_alerta = df[df["fecha_proxima"].notna() & (df["fecha_proxima"] <= hoy + timedelta(days=30))]

        st.markdown("### ‚ö†Ô∏è Calibraciones vencidas o pr√≥ximas")
        if not df_alerta.empty:
            st.dataframe(df_alerta[["id_activo_tecnico", "fecha_proxima", "resultado", "observaciones"]], use_container_width=True)
        else:
            st.success("Todas las calibraciones est√°n al d√≠a ‚úÖ")

        texto = st.text_input("üîç Buscar por ID, resultado o responsable")
        filtrado = df[df.apply(lambda x: texto.lower() in str(x.values).lower(), axis=1)] if texto else df

        for instrumento in sorted(filtrado["id_activo_tecnico"].unique()):
            st.markdown(f"### üè∑Ô∏è Instrumento: `{instrumento}`")
            for _, c in filtrado[filtrado["id_activo_tecnico"] == instrumento].iterrows():
                st.code(f"ID Calibraci√≥n: {c.get('id_calibracion', '‚ùå No definido')}", language="yaml")
                st.markdown(f"- üìÖ **{c['fecha_calibracion']}** ‚Üí üìÜ **Pr√≥xima:** {c['fecha_proxima'].date()}")
                st.markdown(f"- üß™ **Resultado:** {c['resultado']} | üë§ **Responsable:** {c['responsable']}")
                st.markdown(f"- üìù {c.get('observaciones', '')}")
            st.markdown("---")

    elif choice == "Editar Calibraci√≥n":
        st.subheader("‚úèÔ∏è Editar Calibraci√≥n")
        registros = list(coleccion.find())
        opciones = {
            f"{r.get('id_calibracion', '‚ùå')} | {r.get('id_activo_tecnico', 'Sin ID')} - {r.get('fecha_calibracion', 'Sin Fecha')}": r
            for r in registros
        }
        if not opciones:
            st.info("No hay calibraciones disponibles.")
            return
        seleccion = st.selectbox("Seleccionar calibraci√≥n", list(opciones.keys()))
        datos = opciones[seleccion]
        nuevos = form_calibracion(defaults=datos)
        if nuevos:
            coleccion.update_one({"_id": datos["_id"]}, {"$set": nuevos})
            registrar_evento_historial(
                "Edici√≥n de calibraci√≥n",
                nuevos["id_activo_tecnico"],
                nuevos["id_calibracion"],
                f"Edici√≥n de calibraci√≥n ({nuevos['resultado']})",
                nuevos["usuario_registro"]
            )
            st.success("‚úÖ Calibraci√≥n actualizada correctamente.")

    elif choice == "Eliminar Calibraci√≥n":
        st.subheader("üóëÔ∏è Eliminar Calibraci√≥n")
        registros = list(coleccion.find())
        opciones = {
            f"{r.get('id_calibracion', '‚ùå')} | {r.get('id_activo_tecnico', 'Sin ID')} - {r.get('fecha_calibracion', 'Sin Fecha')}": r
            for r in registros
        }
        if not opciones:
            st.info("No hay calibraciones disponibles.")
            return
        seleccion = st.selectbox("Seleccionar calibraci√≥n", list(opciones.keys()))
        datos = opciones[seleccion]
        if st.button("Eliminar definitivamente"):
            coleccion.delete_one({"_id": datos["_id"]})
            registrar_evento_historial(
                "Baja de calibraci√≥n",
                datos.get("id_activo_tecnico"),
                datos.get("id_calibracion"),
                f"Se elimin√≥ calibraci√≥n ({datos.get('resultado', '-')})",
                datos.get("usuario_registro", "desconocido")
            )
            st.success("üóëÔ∏è Calibraci√≥n eliminada correctamente.")

if __name__ == "__main__":
    app()
